/* 
* JfrmBackup.java 
* 
* Created on May 2, 2006, 4:43 PM 
*/ 

package tvams; 
import java.awt.CardLayout; 
import java.sql.*; 

import javax.swing.*; 

//import tvams.MakeTable; 
//import tvams.JDataTable; 
import java.util.Vector; 
import java.util.ResourceBundle; 

import javax.swing.JOptionPane; 

import tvams.Connector;

import java.util.*; 
import java.io.*; 
import java.util.*; 
import java.awt.event.*; 
import java.text.*; 
/** 
* 
* @author Alazar Ghebrehiwot 
*/ 
public class JfrmBackup extends javax.swing.JFrame { 

/** Creates new form JfrmBackup */ 
public JfrmBackup() { 
initComponents(); 
} 

/** This method is called from within the constructor to 
* initialize the form. 
* WARNING: Do NOT modify this code. The content of this method is 
* always regenerated by the Form Editor. 
*/ 
// <editor-fold defaultstate="collapsed" desc=" Generated Code "> 
private void initComponents() { 
btngrptablestobackup = new javax.swing.ButtonGroup(); 
btngrpstructuredata = new javax.swing.ButtonGroup(); 
buttonGroup1 = new javax.swing.ButtonGroup(); 
jpnlbackupinfo = new javax.swing.JPanel(); 
jlbltablestobackup = new javax.swing.JLabel(); 
jbtnfilebrowse = new javax.swing.JButton(); 
jlblBackuptofile = new javax.swing.JLabel(); 
jradbtnalltables = new javax.swing.JRadioButton(); 
jradbtnselected = new javax.swing.JRadioButton(); 
jtxtfilepath = new javax.swing.JTextField(); 
jScrollPane1 = new javax.swing.JScrollPane(); 
jlstTablelist = new javax.swing.JList(); 
jpnlexecutiontime = new javax.swing.JPanel(); 
jcboexecutionchoice = new javax.swing.JComboBox(); 
jLabel6 = new javax.swing.JLabel(); 
jtxtBackupTime = new javax.swing.JTextField(); 
jpnlswitch = new javax.swing.JPanel(); 
jpnlDaily = new javax.swing.JPanel(); 
jlblbackuponeachday = new javax.swing.JLabel(); 
jpnlmonthly = new javax.swing.JPanel(); 
jlblbackupwillbe = new javax.swing.JLabel(); 
jlblonthe = new javax.swing.JLabel(); 
jcbodaychoice = new javax.swing.JComboBox(); 
jlbleachmonth = new javax.swing.JLabel(); 
jpnlWeekly = new javax.swing.JPanel(); 
jlblonweekdays = new javax.swing.JLabel(); 
jlblmonday = new javax.swing.JCheckBox(); 
jlblthuesday = new javax.swing.JCheckBox(); 
jlblwednesday = new javax.swing.JCheckBox(); 
jlblthursday = new javax.swing.JCheckBox(); 
jlblfriday = new javax.swing.JCheckBox(); 
jlblsaturday = new javax.swing.JCheckBox(); 
jlblsunday = new javax.swing.JCheckBox(); 
jchkbExecutiontime = new javax.swing.JCheckBox(); 
jbtnSaveandBackup = new javax.swing.JButton(); 
jButton1 = new javax.swing.JButton(); 
jckbextededinserts = new javax.swing.JPanel(); 
jradstructureonly = new javax.swing.JRadioButton(); 
jRadioButton2 = new javax.swing.JRadioButton(); 
jchkextendedinserts = new javax.swing.JCheckBox(); 
jchkadddrop = new javax.swing.JCheckBox(); 
jckbcompleteinserts = new javax.swing.JCheckBox(); 
jchkadddisablekeys = new javax.swing.JCheckBox(); 
jckbextededinserts1 = new javax.swing.JPanel(); 
jradusingtvamsdump = new javax.swing.JRadioButton(); 
jradusingmysqldump = new javax.swing.JRadioButton(); 
jtxtmysqldumppath = new javax.swing.JTextField(); 
jbtnfilebrwsdump = new javax.swing.JButton(); 

getContentPane().setLayout(null); 

setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); 
setTitle("Backup Database"); 
setResizable(false); 
addWindowListener(new java.awt.event.WindowAdapter() { 
public void windowActivated(java.awt.event.WindowEvent evt) { 
formWindowActivated(evt); 
} 
public void windowOpened(java.awt.event.WindowEvent evt) { 
formWindowOpened(evt); 
} 
}); 

jpnlbackupinfo.setLayout(null); 

jpnlbackupinfo.setBorder(new javax.swing.border.TitledBorder("Database Backup Options")); 
jlbltablestobackup.setFont(new java.awt.Font("Dialog", 0, 12)); 
jlbltablestobackup.setText("Tables to Backup:"); 
jpnlbackupinfo.add(jlbltablestobackup); 
jlbltablestobackup.setBounds(10, 50, 120, 20); 

jbtnfilebrowse.setText("..."); 
jbtnfilebrowse.addMouseListener(new java.awt.event.MouseAdapter() { 
public void mouseClicked(java.awt.event.MouseEvent evt) { 
jbtnfilebrowseMouseClicked(evt); 
} 
}); 

jpnlbackupinfo.add(jbtnfilebrowse); 
jbtnfilebrowse.setBounds(410, 20, 30, 20); 

jlblBackuptofile.setFont(new java.awt.Font("Dialog", 0, 12)); 
jlblBackuptofile.setText("Backup to file:"); 
jpnlbackupinfo.add(jlblBackuptofile); 
jlblBackuptofile.setBounds(10, 20, 100, 20); 

btngrptablestobackup.add(jradbtnalltables); 
jradbtnalltables.setFont(new java.awt.Font("Dialog", 0, 12)); 
jradbtnalltables.setSelected(true); 
jradbtnalltables.setText("All Tables"); 
jradbtnalltables.addMouseListener(new java.awt.event.MouseAdapter() { 
public void mouseClicked(java.awt.event.MouseEvent evt) { 
jradbtnalltablesMouseClicked(evt); 
} 
}); 

jpnlbackupinfo.add(jradbtnalltables); 
jradbtnalltables.setBounds(140, 50, 82, 20); 

btngrptablestobackup.add(jradbtnselected); 
jradbtnselected.setFont(new java.awt.Font("Dialog", 0, 12)); 
jradbtnselected.setText("Selected Tables .."); 
jradbtnselected.addItemListener(new java.awt.event.ItemListener() { 
public void itemStateChanged(java.awt.event.ItemEvent evt) { 
jradbtnselectedItemStateChanged(evt); 
} 
}); 
jradbtnselected.addMouseListener(new java.awt.event.MouseAdapter() { 
public void mouseClicked(java.awt.event.MouseEvent evt) { 
jradbtnselectedMouseClicked(evt); 
} 
}); 

jpnlbackupinfo.add(jradbtnselected); 
jradbtnselected.setBounds(250, 50, 140, 20); 

jpnlbackupinfo.add(jtxtfilepath); 
jtxtfilepath.setBounds(100, 20, 310, 19); 

jlstTablelist.setFont(new java.awt.Font("Dialog", 0, 12)); 
jlstTablelist.setEnabled(false); 
jScrollPane1.setViewportView(jlstTablelist); 

jpnlbackupinfo.add(jScrollPane1); 
jScrollPane1.setBounds(170, 70, 180, 80); 

getContentPane().add(jpnlbackupinfo); 
jpnlbackupinfo.setBounds(10, 10, 450, 160); 

jpnlexecutiontime.setLayout(null); 

jpnlexecutiontime.setBorder(new javax.swing.border.EtchedBorder()); 
jcboexecutionchoice.setFont(new java.awt.Font("Dialog", 0, 14)); 
jcboexecutionchoice.addItemListener(new java.awt.event.ItemListener() { 
public void itemStateChanged(java.awt.event.ItemEvent evt) { 
jcboexecutionchoiceItemStateChanged(evt); 
} 
}); 
jcboexecutionchoice.addMouseListener(new java.awt.event.MouseAdapter() { 
public void mouseClicked(java.awt.event.MouseEvent evt) { 
jcboexecutionchoiceMouseClicked(evt); 
} 
}); 

jpnlexecutiontime.add(jcboexecutionchoice); 
jcboexecutionchoice.setBounds(20, 20, 380, 20); 

jLabel6.setFont(new java.awt.Font("Dialog", 0, 10)); 
jLabel6.setText("Backup will be executed at this time:"); 
jpnlexecutiontime.add(jLabel6); 
jLabel6.setBounds(40, 160, 230, 20); 

jtxtBackupTime.setText("23:00"); 
jpnlexecutiontime.add(jtxtBackupTime); 
jtxtBackupTime.setBounds(230, 160, 60, 19); 

jpnlswitch.setLayout(new java.awt.CardLayout()); 

jpnlswitch.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0))); 
jpnlDaily.setLayout(null); 

jpnlDaily.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED)); 
jlblbackuponeachday.setFont(new java.awt.Font("Dialog", 0, 10)); 
jlblbackuponeachday.setText("Backup will be taken on each day :"); 
jpnlDaily.add(jlblbackuponeachday); 
jlblbackuponeachday.setBounds(0, 0, 280, 15); 

jpnlswitch.add(jpnlDaily, "card2"); 

jpnlmonthly.setLayout(null); 

jpnlmonthly.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED)); 
jpnlmonthly.setFocusable(false); 
jlblbackupwillbe.setFont(new java.awt.Font("Dialog", 0, 10)); 
jlblbackupwillbe.setText("The backup will be executed once a month"); 
jpnlmonthly.add(jlblbackupwillbe); 
jlblbackupwillbe.setBounds(10, 10, 350, 13); 

jlblonthe.setText("On The:"); 
jpnlmonthly.add(jlblonthe); 
jlblonthe.setBounds(10, 30, 50, 15); 

jcbodaychoice.setFont(new java.awt.Font("Dialog", 0, 10)); 
jpnlmonthly.add(jcbodaychoice); 
jcbodaychoice.setBounds(60, 30, 50, 20); 

jlbleachmonth.setText("of each month"); 
jpnlmonthly.add(jlbleachmonth); 
jlbleachmonth.setBounds(110, 30, 90, 20); 

jpnlswitch.add(jpnlmonthly, "card3"); 

jpnlWeekly.setLayout(null); 

jpnlWeekly.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED)); 
jlblonweekdays.setFont(new java.awt.Font("Dialog", 0, 10)); 
jlblonweekdays.setText("The Backup will be executed on each of the following weekdays:"); 
jlblonweekdays.setPreferredSize(new java.awt.Dimension(75, 15)); 
jpnlWeekly.add(jlblonweekdays); 
jlblonweekdays.setBounds(0, 0, 320, 15); 

jlblmonday.setSelected(true); 
jlblmonday.setText("Monday"); 
jpnlWeekly.add(jlblmonday); 
jlblmonday.setBounds(10, 20, 74, 20); 

jlblthuesday.setText("Thuesday"); 
jpnlWeekly.add(jlblthuesday); 
jlblthuesday.setBounds(110, 20, 85, 20); 

jlblwednesday.setText("Wednesday"); 
jpnlWeekly.add(jlblwednesday); 
jlblwednesday.setBounds(210, 20, 95, 20); 

jlblthursday.setText("Thursday"); 
jpnlWeekly.add(jlblthursday); 
jlblthursday.setBounds(10, 40, 98, 20); 

jlblfriday.setText("Friday"); 
jpnlWeekly.add(jlblfriday); 
jlblfriday.setBounds(110, 40, 63, 20); 

jlblsaturday.setText("Saturday"); 
jpnlWeekly.add(jlblsaturday); 
jlblsaturday.setBounds(210, 40, 79, 20); 

jlblsunday.setText("Sunday"); 
jpnlWeekly.add(jlblsunday); 
jlblsunday.setBounds(10, 60, 70, 20); 

jpnlswitch.add(jpnlWeekly, "card4"); 

jpnlexecutiontime.add(jpnlswitch); 
jpnlswitch.setBounds(20, 50, 380, 100); 

jchkbExecutiontime.setFont(new java.awt.Font("Dialog", 0, 12)); 
jchkbExecutiontime.setText("Execution Time:"); 
jpnlexecutiontime.add(jchkbExecutiontime); 
jchkbExecutiontime.setBounds(20, 0, 130, 20); 

getContentPane().add(jpnlexecutiontime); 
jpnlexecutiontime.setBounds(10, 350, 450, 180); 

jbtnSaveandBackup.setText("Save and Backup Now"); 
jbtnSaveandBackup.addActionListener(new java.awt.event.ActionListener() { 
public void actionPerformed(java.awt.event.ActionEvent evt) { 
jbtnSaveandBackupActionPerformed(evt); 
} 
}); 
jbtnSaveandBackup.addMouseListener(new java.awt.event.MouseAdapter() { 
public void mouseClicked(java.awt.event.MouseEvent evt) { 
jbtnSaveandBackupMouseClicked(evt); 
} 
}); 

getContentPane().add(jbtnSaveandBackup); 
jbtnSaveandBackup.setBounds(40, 540, 170, 25); 

jButton1.setText("Save"); 
getContentPane().add(jButton1); 
jButton1.setBounds(250, 540, 62, 25); 

jckbextededinserts.setLayout(null); 

jckbextededinserts.setBorder(new javax.swing.border.TitledBorder("Output File Options")); 
btngrpstructuredata.add(jradstructureonly); 
jradstructureonly.setFont(new java.awt.Font("Dialog", 0, 10)); 
jradstructureonly.setText("Structure only"); 
jckbextededinserts.add(jradstructureonly); 
jradstructureonly.setBounds(10, 40, 120, 21); 

btngrpstructuredata.add(jRadioButton2); 
jRadioButton2.setFont(new java.awt.Font("Dialog", 0, 10)); 
jRadioButton2.setSelected(true); 
jRadioButton2.setText("Structure and Data"); 
jRadioButton2.addActionListener(new java.awt.event.ActionListener() { 
public void actionPerformed(java.awt.event.ActionEvent evt) { 
jRadioButton2ActionPerformed(evt); 
} 
}); 

jckbextededinserts.add(jRadioButton2); 
jRadioButton2.setBounds(10, 20, 120, 21); 

jchkextendedinserts.setFont(new java.awt.Font("Dialog", 0, 10)); 
jchkextendedinserts.setSelected(true); 
jchkextendedinserts.setText("No Extended INSERTs"); 
jchkextendedinserts.addActionListener(new java.awt.event.ActionListener() { 
public void actionPerformed(java.awt.event.ActionEvent evt) { 
jchkextendedinsertsActionPerformed(evt); 
} 
}); 

jckbextededinserts.add(jchkextendedinserts); 
jchkextendedinserts.setBounds(140, 20, 130, 20); 

jchkadddrop.setFont(new java.awt.Font("Dialog", 0, 10)); 
jchkadddrop.setSelected(true); 
jchkadddrop.setText("Add DROP Statements"); 
jckbextededinserts.add(jchkadddrop); 
jchkadddrop.setBounds(270, 20, 140, 20); 

jckbcompleteinserts.setFont(new java.awt.Font("Dialog", 0, 10)); 
jckbcompleteinserts.setSelected(true); 
jckbcompleteinserts.setText("Complete INSERTs"); 
jckbextededinserts.add(jckbcompleteinserts); 
jckbcompleteinserts.setBounds(140, 40, 120, 20); 

jchkadddisablekeys.setFont(new java.awt.Font("Dialog", 0, 10)); 
jchkadddisablekeys.setSelected(true); 
jchkadddisablekeys.setText("Disable Keys"); 
jchkadddisablekeys.addActionListener(new java.awt.event.ActionListener() { 
public void actionPerformed(java.awt.event.ActionEvent evt) { 
jchkadddisablekeysActionPerformed(evt); 
} 
}); 

jckbextededinserts.add(jchkadddisablekeys); 
jchkadddisablekeys.setBounds(270, 40, 140, 20); 

getContentPane().add(jckbextededinserts); 
jckbextededinserts.setBounds(10, 260, 450, 80); 

jckbextededinserts1.setLayout(null); 

jckbextededinserts1.setBorder(new javax.swing.border.TitledBorder("Backup Options")); 
buttonGroup1.add(jradusingtvamsdump); 
jradusingtvamsdump.setFont(new java.awt.Font("Dialog", 0, 10)); 
jradusingtvamsdump.setSelected(true); 
jradusingtvamsdump.setText("Using Tvamsdump"); 
jckbextededinserts1.add(jradusingtvamsdump); 
jradusingtvamsdump.setBounds(10, 40, 120, 21); 

buttonGroup1.add(jradusingmysqldump); 
jradusingmysqldump.setFont(new java.awt.Font("Dialog", 0, 10)); 
jradusingmysqldump.setText("Using mysqldump"); 
jradusingmysqldump.addItemListener(new java.awt.event.ItemListener() { 
public void itemStateChanged(java.awt.event.ItemEvent evt) { 
jradusingmysqldumpItemStateChanged(evt); 
} 
}); 

jckbextededinserts1.add(jradusingmysqldump); 
jradusingmysqldump.setBounds(10, 20, 120, 21); 

jtxtmysqldumppath.setText("Locate path for mysqldump.exe"); 
jckbextededinserts1.add(jtxtmysqldumppath); 
jtxtmysqldumppath.setBounds(130, 20, 270, 19); 

jbtnfilebrwsdump.setText("..."); 
jbtnfilebrwsdump.addMouseListener(new java.awt.event.MouseAdapter() { 
public void mouseClicked(java.awt.event.MouseEvent evt) { 
jbtnfilebrwsdumpMouseClicked(evt); 
} 
}); 

jckbextededinserts1.add(jbtnfilebrwsdump); 
jbtnfilebrwsdump.setBounds(400, 20, 30, 20); 

getContentPane().add(jckbextededinserts1); 
jckbextededinserts1.setBounds(10, 180, 450, 70); 

java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize(); 
setBounds((screenSize.width-489)/2, (screenSize.height-605)/2, 489, 605); 
} 
// </editor-fold> 

private void jradbtnalltablesMouseClicked(java.awt.event.MouseEvent evt) { 

// TODO add your handling code here: 
} 

private void jchkadddisablekeysActionPerformed(java.awt.event.ActionEvent evt) { 
// TODO add your handling code here: 
} 

private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) { 
// TODO add your handling code here: 
} 

private void jchkextendedinsertsActionPerformed(java.awt.event.ActionEvent evt) { 
// TODO add your handling code here: 
} 

private void jbtnSaveandBackupActionPerformed(java.awt.event.ActionEvent evt) { 
// TODO add your handling code here: 
} 

private void jradusingmysqldumpItemStateChanged(java.awt.event.ItemEvent evt) { 
if(jradusingmysqldump.isSelected()!=true ){ 
jtxtmysqldumppath.hide(); 
jbtnfilebrwsdump.hide(); 
}else{ 
jtxtmysqldumppath.show(); 
jbtnfilebrwsdump.show(); 
} 
// TODO add your handling code here: 
} 

private void jbtnfilebrwsdumpMouseClicked(java.awt.event.MouseEvent evt) { 
JFileChooser fc=new JFileChooser(); 
int returnVal = fc.showOpenDialog(JfrmBackup.this); 
if (returnVal == JFileChooser.APPROVE_OPTION) { 
targetfile = fc.getSelectedFile(); 
//This is where a real application would save the file. 
jtxtmysqldumppath.setText(targetfile.getPath()); 
} 

// TODO add your handling code here: 
} 

private void jbtnSaveandBackupMouseClicked(java.awt.event.MouseEvent evt) { 
// TODO add your handling code here: 
/*specify when backup will be taken*/ 
backupdaily=false; 
backupmonthly=false; 
backupweekly=false; 
String t=jtxtBackupTime.getText(); 
boolean h=t.matches("[0-9]?[0-9]:[0-9][0-9]?"); 
// System.out.println("The Back up time is okay"+h); 
String [] s=t.split(":"); 
//for(int i=0;i<s.length;i++){ 
ONE_SECOND=1000;//initialize one second mean 
executiondate(); //find when to execute 
//(Integer.parseInt(s[0])*24*60*60+Integer.parseInt(s[1])*60)*1000; 
// System.out.println(ONE_SECOND); 

// } 
/*scheduling and check every 24hrs if backup will be taken today*/ 
timer = new javax.swing.Timer(ONE_SECOND, new ActionListener() { 
public void actionPerformed(ActionEvent evt) { 

Calendar cal = Calendar.getInstance(); 
DecimalFormat dcF = new DecimalFormat("00"); 
currentweekday = Calendar.DAY_OF_WEEK; 
currentday = Calendar.DAY_OF_MONTH; 
if(backupdaily==true) takebakup(); //backup will be taken at each check point 
else if(backupweekly==true){ //backup will be taken on the specified days only 
for(int i=0;i < weekday.size();i++){ 
System.out.println((String)weekday.get(i)); 
System.out.println("The System current weekday is:-"+ currentweekday); 
// if((String)weekday.get(i)==Curr) 
if(currentweekday==Integer.parseInt((String)weekday.get(i))) { //check if today is one of the selected weekdays where backup will be taken 
takebakup(); 
//timer.stop(); 
} 
} 
} 
else if(backupmonthly==true){ 
System.out.println(daytobackup); 
if(currentday==daytobackup){ 
takebakup(); 
//timer.stop(); 
} 
} 
timer.stop(); //stop the timer 
System.exit(0); //exit the system 

} 
}); 
timer.start(); //start the timer first to start the schedule 

} 
private void executiondate(){ 

// String dateofexecutionis=""; 
weekday=new Vector(); 
switch(jcboexecutionchoice.getSelectedIndex()){ 
case 0: // backup is scheduled daily 
backupdaily=true; 
//} 

//form regex to for everday 
case 1:{ 
//put the selected weekdays on vector table 
backupweekly=true; 
if(jlblmonday.isSelected()) weekday.add("2"); 
if(jlblthuesday.isSelected()) weekday.add("3"); 
if(jlblwednesday.isSelected()) weekday.add("4"); 
if(jlblthursday.isSelected()) weekday.add("5"); 
if(jlblfriday.isSelected()) weekday.add("6"); 
if(jlblsaturday.isSelected()) weekday.add("7"); 
if(jlblsunday.isSelected()) weekday.add("1"); 

} 
case 2: 
{ //backup will be taken monthly on the specified day 
backupmonthly=true; 
daytobackup=jcbodaychoice.getSelectedIndex(); // 
//m=m.substring(0, 2); 
daytobackup++; 
//System.out.println(month); 


} 

default : 

// backupdaily=true; 
} 
//System.out.print((String)jcbodaychoice.getSelectedItem()); 
} 
private void jradbtnselectedItemStateChanged(java.awt.event.ItemEvent evt) { 
//System.out.println(jradbtnselected.isSelected()==true); 
if(jradbtnselected.isSelected()==true){ 
jlstTablelist.enable(true); 
}else{ 
jlstTablelist.enable(false); 
} 
// TODO add your handling code here: 
} 

private void formWindowActivated(java.awt.event.WindowEvent evt) { 
// TODO add your handling code here: 
} 

private void jcboexecutionchoiceItemStateChanged(java.awt.event.ItemEvent evt) { 
CardLayout card=(CardLayout)(jpnlswitch.getLayout()); 
String selectedCard = (String)evt.getItem(); 
if(selectedCard.equals(card2)) selectedCard="card2"; 
else if(selectedCard.equals(card3)) selectedCard="card3"; 
else selectedCard="card4"; 
card.show(jpnlswitch,selectedCard); 

// TODO add your handling code here: 
} 

private void jradbtnselectedMouseClicked(java.awt.event.MouseEvent evt) { 
if(jradbtnselected.isSelected()==true){ 
jlstTablelist.enable(true); 
}else{ 
jlstTablelist.enable(false); 
} 
// TODO add your handling code here: 
} 

private void formWindowOpened(java.awt.event.WindowEvent evt) { 

//String cboitems[]={daily,weekly,monthly}; 
con = new tvams.Connector("tvams", "tvams2006"); 
String selectquery="show tables"; 
String [] tablenames={}; 
// System.out.println("The Query is:" + selectquery); 
try{ 
rs = con.Selection(selectquery); 
rs.beforeFirst(); 
tablecount=0; 
tablenames=new String [30]; 
System.out.println(tablecount); 
while (rs.next()) { 
tablenames[tablecount] = rs.getString("Tables_in_tvams"); 
// System.out.println("Table Name is:" + rs.getString("Tables_in_tvams"));//tablenames[tablecount]); 
tablecount++; 
} 
jlstTablelist.setListData(tablenames); 
}catch(SQLException e) { 
System.out.println(e.getMessage()); 
} 

jcboexecutionchoice.addItem(card2); 
jcboexecutionchoice.addItem(card4); 
jcboexecutionchoice.addItem(card3); 
jcboexecutionchoice.setEditable(false); 
jcbodaychoice.addItem("1st"); 
jcbodaychoice.addItem("2nd"); 
jcbodaychoice.addItem("3rd"); 
for(int i=4;i<=31;i++){ 
jcbodaychoice.addItem(i+"th"); 

} 
//timer.start(); 
// TODO add your handling code here: 
} 

private void jcboexecutionchoiceMouseClicked(java.awt.event.MouseEvent evt) { 
// TODO add your handling code here: 
} 

private void jbtnfilebrowseMouseClicked(java.awt.event.MouseEvent evt) { 
JFileChooser fc=new JFileChooser(); 
int returnVal = fc.showSaveDialog(JfrmBackup.this); 
if (returnVal == JFileChooser.APPROVE_OPTION) { 
targetfile = fc.getSelectedFile(); 
//This is where a real application would save the file. 
jtxtfilepath.setText(targetfile.getPath()); 
} 
// log.setCaretPosition(log.getDocument().getLength()); 
// TODO add your handling code here: 
} 
public String [] builtoptions(){ 
Object [] tablestobedumped={}; 
String extendedinsert="--extended-insert=true"; 
String adddropstatment="--add-drop-table=true"; 
String addlocks="--add-locks=true"; 
String adddisablekeys="--disable-keys=true"; 
String addcreateinfo="--no-create-info=true"; 
String addcompleteinserts="--complete-insert=true"; 
if(jchkextendedinserts.isSelected()==false){ 
extendedinsert="--extended-insert=false"; 
} 
if(jchkadddrop.isSelected()==false){ 
adddropstatment="--add-drop-table=false"; 
} 
if(jchkadddisablekeys.isSelected()==false){ 
adddisablekeys="--disable-keys=false"; 
} 

if(jckbcompleteinserts.isSelected()==false){ 
addcompleteinserts="--complete-insert=false"; 
} 
String [] options={ jtxtmysqldumppath.getText().trim() +"/mysqldump","--user=tvams","--password=tvams2006","tvams","--host=172.16.1.10",addcompleteinserts,addcreateinfo,adddisablekeys,adddropstatment,addlocks, extendedinsert}; 
return options; 
} 
public int takebakup(){ 
/*get the current system time to attach with the backup file name choosen*/ 
Calendar cal = Calendar.getInstance(); 
DecimalFormat dcF = new DecimalFormat("00"); 
String currentDate = cal.get(Calendar.YEAR) + "-" + dcF.format(cal.get(Calendar.MONTH)+1) + "-" + dcF.format(cal.get(Calendar.DATE)); 
String path=(String)jtxtfilepath.getText().trim();//the path for the backup file to be created 
try{ 
outputstream= new FileOutputStream(targetfile.getAbsolutePath());// 
outputprint = new PrintStream(outputstream);//prepare the backup file for out put 

}catch(java.io.FileNotFoundException ex){ 
/* Inform that the file path is not correct try again*/ 
JOptionPane.showMessageDialog(this,"The File " + path + " is Not Found" ,"TVAMS",JOptionPane.INFORMATION_MESSAGE); 
return -1; 
}catch(Exception ex){ 
JOptionPane.showMessageDialog(this,"The File " + path + " is Not Found" ,"TVAMS",JOptionPane.INFORMATION_MESSAGE); 
return -1; 
} 
Object [] tablestobedumped=jlstTablelist.getSelectedValues();//get the selected tables from the list of tables 

if(jradusingmysqldump.isSelected()==true){ //take backup using mysqldump 
String [] options=builtoptions(); //prepare the options to use 
return( new Backupnew().backupusingbat(options, tablestobedumped)); 

} 
else{	//take backup by querying the database using connector class 
int number_of_tables=0; 
String sql=null; 
//open back-up file ( or no file for browser output)# 
//ResultSet desc = con.Selection("desc drivers_details"); 
rs = con.Selection("show tables"); //find all the tables in the database 
//enumerate tables 
String tablename=null; 
String backup=""; 
/*out put few lines describing which dump used the server info and database info*/ 
backup+="-- TVAMS dump 1.0 \n"; 
backup+="-- Host: 172.16.1.10 Database: tvams\n"; 
backup+="---------------------------------------------------------\n"; 
backup+="-- Server version 3.23.54\n\n"; 
outputprint.println(backup); 
System.out.println(createdatbasestructure("tvams")); //to be deleted just for check up 
outputprint.println(createdatbasestructure("tvams")); //first create the database structure for the database name tvams 
//String tablesql=""; 
try{ 

if(jradbtnalltables.isSelected()==true){ //dump all the tables 
while(rs.next()) //create the structure of all tables 
{ 

tablename=rs.getString("Tables_in_tvams"); 
System.out.println(backup); 

backup=createtablestructrue(tablename); 
outputprint.println(backup); 
if(jradstructureonly.isSelected()==false){//check if data also to be backuped 
System.out.print(tabledata(tablename)); //just for checkup 
outputprint.print(tabledata(tablename)); //out put the slected table data to the backup file 
} 
} 
}else{// only the selected tables will be dumped 

for(int i=0;i< tablestobedumped.length; i++){ 

tablename=(String)tablestobedumped; 
//System.out.println(tablestobedumped); 
backup=createtablestructrue(tablename); 
System.out.println(backup); 
outputprint.println(backup); 
if(jradstructureonly.isSelected()==false){//check if data also to be backuped 
System.out.print(tabledata(tablename)); //just for checkup 
outputprint.print(tabledata(tablename)); //out put the slected table data to the backup file 
} 

} 
} 
}catch(SQLException ex) 
{ 
System.out.println(ex.getMessage()); 
} 
} 
JOptionPane.showMessageDialog(null,"The BackUp was finished successfully at \n" + currentDate + "\nThe File " + path + "has been created." ,"TVAMS",JOptionPane.INFORMATION_MESSAGE); 
return 0; 
} 

private static String createdatbasestructure(String database_name){ 
/* 
query the structure of the database using Show Create Database query which is unique to mysql 
returns resultset with two fields databasename and the structrure 
*/ 
String sql=""; 
/*prepare the query for the choosen table*/ 
String showsql="SHOW CREATE DATABASE " + database_name; 
ResultSet databasestructure = con.Selection(showsql); 

try{ 
databasestructure.beforeFirst(); 
databasestructure.next(); 
sql+=databasestructure.getString(2); 
sql+="\n\n"; 
}catch(SQLException ex) 
{ 
System.out.println(ex.getMessage()); 
} 

return sql; 
} 

private static String createtablestructrue(String table_name){ 
/* 
query the structure of the database using Show Create Database query which is unique to mysql 
returns resultset with two fields databasename and the structrure 
*/ 
//few description message which is sql comment 
String sql=""; 
sql="--\n"; 
sql+="-- Table structure for table '" + table_name + "'\n"; 
sql+="--\n\n"; 

String showsql="SHOW CREATE TABLE " + table_name; 
ResultSet tablestructure = con.Selection(showsql); 

try{ 
tablestructure.beforeFirst(); 
tablestructure.next(); 
sql+=tablestructure.getString(2); 
sql+="\n\n"; 
}catch(SQLException ex) 
{ 
System.out.println(ex.getMessage()); 
} 

return sql; 

} 

private static String tabledata(String table_name){ 


int no_of_fields=0;//tablestructure.getFetchSize(); 
// String column_name=""; 

String sql=""; 
int field=1; 
String data=null; 
sql="--\n"; 
sql+="-- Dumping data for table 'accidentgeneral_details\n"; 
sql+="--\n\n"; 
sql+="LOCK TABLES " + table_name +" WRITE;\n"; 
ResultSet tabledata=con.Selection("Desc " + table_name);; 
try{ 
while(tabledata.next()){ 
no_of_fields++; 
} 
tabledata = con.Selection("Select * from " + table_name); 
//System.out.println("Number of fields is:" + no_of_fields); 
tabledata.beforeFirst(); 
if(!tabledata.next()){ 
return sql; 
} 
tabledata.previous(); 
sql+="INSERT INTO " + table_name + " VALUES \n"; 
//for(int field=0;field<no_of_fields;field++){ 
while(tabledata.next()){ 
// column_name=tabledata.getString("Field"); 
sql+="("; 
for (int d=1;d<=no_of_fields;d++) 
{ 
data=tabledata.getString(d); 

sql+="\'"+data+"\'"; 


if (d<(no_of_fields)) sql+=", "; 

} 
if(tabledata.isLast()==true){ 
sql+=");\n\n"; 
}else{ 
sql+="),\n"; 
} 


} 
sql+="/*!40000 ALTER TABLE " + table_name + " ENABLE KEYS */;\n"; 
sql+="UNLOCK TABLES\n"; 
System.out.println(sql); 
System.out.println("\n\n"); 
// } 
}catch(SQLException ex) 
{ 
System.out.println(ex.getMessage()); 
} 
// System.out.println(sql); 
return sql; 

} 

/** 
* @param args the command line arguments 
*/ 

public static void main(String args[]) { 
java.awt.EventQueue.invokeLater(new Runnable() { 
public void run() { 
new JfrmBackup().setVisible(true); 
} 
}); 
} 

// Variables declaration - do not modify 
private javax.swing.ButtonGroup btngrpstructuredata; 
private javax.swing.ButtonGroup btngrptablestobackup; 
private javax.swing.ButtonGroup buttonGroup1; 
private javax.swing.JButton jButton1; 
private javax.swing.JLabel jLabel6; 
private javax.swing.JRadioButton jRadioButton2; 
private javax.swing.JScrollPane jScrollPane1; 
private javax.swing.JButton jbtnSaveandBackup; 
private javax.swing.JButton jbtnfilebrowse; 
private javax.swing.JButton jbtnfilebrwsdump; 
private javax.swing.JComboBox jcbodaychoice; 
private javax.swing.JComboBox jcboexecutionchoice; 
private javax.swing.JCheckBox jchkadddisablekeys; 
private javax.swing.JCheckBox jchkadddrop; 
private javax.swing.JCheckBox jchkbExecutiontime; 
private javax.swing.JCheckBox jchkextendedinserts; 
private javax.swing.JCheckBox jckbcompleteinserts; 
private javax.swing.JPanel jckbextededinserts; 
private javax.swing.JPanel jckbextededinserts1; 
private javax.swing.JLabel jlblBackuptofile; 
private javax.swing.JLabel jlblbackuponeachday; 
private javax.swing.JLabel jlblbackupwillbe; 
private javax.swing.JLabel jlbleachmonth; 
private javax.swing.JCheckBox jlblfriday; 
private javax.swing.JCheckBox jlblmonday; 
private javax.swing.JLabel jlblonthe; 
private javax.swing.JLabel jlblonweekdays; 
private javax.swing.JCheckBox jlblsaturday; 
private javax.swing.JCheckBox jlblsunday; 
private javax.swing.JLabel jlbltablestobackup; 
private javax.swing.JCheckBox jlblthuesday; 
private javax.swing.JCheckBox jlblthursday; 
private javax.swing.JCheckBox jlblwednesday; 
private javax.swing.JList jlstTablelist; 
private javax.swing.JPanel jpnlDaily; 
private javax.swing.JPanel jpnlWeekly; 
private javax.swing.JPanel jpnlbackupinfo; 
private javax.swing.JPanel jpnlexecutiontime; 
private javax.swing.JPanel jpnlmonthly; 
private javax.swing.JPanel jpnlswitch; 
private javax.swing.JRadioButton jradbtnalltables; 
private javax.swing.JRadioButton jradbtnselected; 
private javax.swing.JRadioButton jradstructureonly; 
private javax.swing.JRadioButton jradusingmysqldump; 
private javax.swing.JRadioButton jradusingtvamsdump; 
private javax.swing.JTextField jtxtBackupTime; 
private javax.swing.JTextField jtxtfilepath; 
private javax.swing.JTextField jtxtmysqldumppath; 
// End of variables declaration 
private static tvams.Connector con; 
private static ResultSet rs; 
private String tablename=null; 
private static int tablecount=0; 
private JDataTable display =null; 
private boolean insert=false; 
final static String card2 ="Execute Backup Daily"; 
final static String card3="Execute Backup Monthly"; 
final static String card4="Execute Backup Weekly"; 
private static FileOutputStream outputstream= null; 
private static PrintStream outputprint=null ; 
private static File targetfile=null; 
private static javax.swing.Timer timer; 
public static int ONE_SECOND = 9000; 
// private String currentmonth=null; 
private int currentday=1; 
private int currentweekday=1; 
private static boolean backupdaily=false; 
private static boolean backupweekly=false; 
private static boolean backupmonthly=false; 
private static Vector weekday=null; 
private static int daytobackup=0; 

}